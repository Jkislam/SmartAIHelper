from flask import Flask, request, jsonify
import openai
import pytesseract
from PIL import Image
import base64
import io
import os
from config import API_KEY

openai.api_key = API_KEY
app = Flask(__name__)

# üîπ ‡ßß. ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‚û°Ô∏è ‡¶∏‡¶æ‡¶Æ‡¶æ‡¶∞‡¶ø
@app.route('/summary', methods=['POST'])
def summarize():
    data = request.json
    text = data.get("text", "")
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": f"‡¶è‡¶á ‡¶¨‡¶ï‡ßç‡¶§‡¶¨‡ßç‡¶Ø‡¶ü‡¶æ ‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡ßá‡¶™‡ßá ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶≠‡¶æ‡¶∑‡¶æ‡ßü ‡¶¨‡ßÅ‡¶ù‡¶ø‡ßü‡ßá ‡¶¶‡¶æ‡¶ì:\n{text}"}]
    )
    return jsonify({"summary": response['choices'][0]['message']['content']})

# üîπ ‡ß®. ‡¶Ö‡¶ß‡ßç‡¶Ø‡¶æ‡ßü ‚û°Ô∏è MCQ
@app.route('/mcq', methods=['POST'])
def mcq():
    data = request.json
    chapter = data.get("chapter", "")
    prompt = f"{chapter} ‡¶¨‡¶ø‡¶∑‡ßü ‡¶•‡ßá‡¶ï‡ßá ‡ß´‡¶ü‡¶ø MCQ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßã, ‡¶Ö‡¶™‡¶∂‡¶®‡¶∏‡¶π ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶†‡¶ø‡¶ï ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡¶æ‡¶ì‡•§"
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}]
    )
    return jsonify({"mcqs": response['choices'][0]['message']['content']})

# üîπ ‡ß©. ‡¶õ‡¶¨‡¶ø ‚û°Ô∏è ‡¶®‡ßã‡¶ü
@app.route('/image-to-notes', methods=['POST'])
def image_to_notes():
    data = request.json
    image_data = data.get("image_base64", "")
    image = Image.open(io.BytesIO(base64.b64decode(image_data)))
    extracted_text = pytesseract.image_to_string(image, lang="eng+ben")

    # Now summarize
    prompt = f"‡¶è‡¶á ‡¶≤‡ßá‡¶ñ‡¶æ‡¶ü‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶≠‡¶æ‡¶∑‡¶æ‡ßü ‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡¶ø‡¶™‡ßç‡¶§ ‡¶®‡ßã‡¶ü ‡¶¨‡¶æ‡¶®‡¶æ‡¶ì:\n{extracted_text}"
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}]
    )
    return jsonify({
        "extracted_text": extracted_text,
        "summary": response['choices'][0]['message']['content']
    })

# üîπ ‡ß™. ‡¶∞‡ßÅ‡¶ü‡¶ø‡¶® ‡¶™‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶®‡¶æ‡¶∞
@app.route('/')
def home():
    return "<h3>‚úÖ Smart AI Helper API is Live.<br>Use POST to /summary, /mcq, /image-to-notes or /routine</h3>"
def routine():
    data = request.json
    subjects = data.get("subjects", "")
    hours = data.get("hours", 2)
    prompt = f"‡¶è‡¶á ‡¶¨‡¶ø‡¶∑‡ßü‡¶ó‡ßÅ‡¶≤‡ßã: {subjects} ‡¶¶‡¶ø‡ßü‡ßá ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶¶‡¶ø‡¶® {hours} ‡¶ò‡¶®‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßá ‡ßß ‡¶∏‡¶™‡ßç‡¶§‡¶æ‡¶π‡ßá‡¶∞ ‡¶™‡ßú‡¶æ‡¶∂‡ßã‡¶®‡¶æ‡¶∞ ‡¶∞‡ßÅ‡¶ü‡¶ø‡¶® ‡¶¨‡¶æ‡¶®‡¶æ‡¶ì‡•§"
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}]
    )
    return jsonify({"routine": response['choices'][0]['message']['content']})

if __name__ == '__main__':
    port = int(os.environ.get("PORT", 7860))  # Render PORT ‡¶ß‡¶∞‡ßá
    app.run(host='0.0.0.0', port=port)

